Important to read !!
====================
this happened in address and role claims in this project
https://leastprivilege.com/2017/11/15/missing-claims-in-the-asp-net-core-2-openid-connect-handler/

Nuget Packages
==============
IdentityModel				-> for manually calling discovery endpoint & /UserInfo endpoint
IdentityServer4.AccessTokenValidation	-> for validating access_token


rewatch
=======
27 - Inspecting an Identity Token
33 - keeping the original claim types (Clear JwtSecurityTokenHelper.DefaultInboundClaimTypeMapping)
34 - Only Keeping Claims that we will need
36 - Getting Ready for calling the UserInfo Endpoint
37 - Manually Calling /UserInfo Endpoint       					(Nuget IdentityModel)

44 - 50 Understanding OAuth2 and OpenIdConnect Section (11 minutes)
53 - Validating Access Token 							(Nuget IdentityServer4.AccessTokenValidation)
60/61 - Ensuring that (Role) claim is included in the access_token
64-70 - [ACAB] Attribute Based Access Control
	67 - Using a simple Authorization Policy (SubscriptionLevel & Country)
	68 - Extending Authorization Policies with Requirements and Handlers
	69 - Handling Requirement
72 - Token Lifetimes and Expiration
73 @ 1:50 (the api allows 5 minutes access after access_token is expired)
74 - Gaining Long-lived Access with Refresh Tokens
75 - Demo - Gaining Long-lived Access with Refresh Tokens !!


Notes
=====
26 - Calling the UserInfo Endpoint to Get Additional Claims
===========================================================
because identity token is sent via URL we keep it as small as possible 
claims like given_name and family_name are no included in the "Id Token"
are not included by default

if we want to include them (Not preferred) 
we set AlwaysIncludeUserClaimsInIdToken = true, 
<< in the Idp Level for each client >>

instead to make sure the client hits /UserInfo endpoint (preferred)
we set options.GetClaimsFromUserInfoEndpoint = true;
<< in the client application >>


28-29-30 Logging out
====================
to logout from our client application we need to
- delete the cookies for the user and the cliams (at level of the client)
	await HttpContext.SignOutAsync("Cookies");
-logout at the level of Idp
	await HttpContext.SignOutAsync("OpenIdConnect");


to configure the openIdConnect signout redirect Url in the client we set
	options.SignedOutCallbackPath = "/signout-callback-oidc"; (Default = /signout-callback-oidc)

to configure the signout redirect uri in the Idp we configure:
	clientObject.PostLogoutRedirectUris = { "/signout-callback-oidc" }



===========================================
Working with Claims 
===========================================
33 Keeping Originial Claims
===========================
To keep the originical claim Types mapping we clear the default mapper:

	JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear();

34 Only Keeping Claims that we will need
========================================
to keep the authentication cookie as small as possible

in Client App UseOpenIdConnect we can listen to Events (On Token Validated)

options.Events = new OpenIdConnectEvents() {
	OnTokenValidated = async tokenValidatedContext => {
		subjectClaim = tokenValidatedContext.Principal.Claims.FirstOrDefault(c => c.Type == "sub");
		var newClaimsIdentity = new ClaimsIdentity(tokenValidatedContext.Scheme.Name, "given_name", "role");
		newClaimsIdentity.AddClaim(subjectClaim);
		tokenValidatedContext.Principal = new ClaimsPrincipal(newClaimsIdentity);
	},	
	OnUserInformationReceived = async userInformationReceivedContext => {
		await System.Threading.Tasks.Task.CompletedTask;
	}
};


35-37 Getting Additional Information from /UserInfo Endpoint
=========================================================
we need to add new IdentityResource like address 
but we don't need to keep it in the authentication cookie
 -we keep the cookie small, and not include sensentive data.
 -to get the latest info about the user's address (from /UserInfo)

1- we added address in IdentityResources & scopes in our client
2- we added address in scopes of Client Application
3- we delete the address from the User in Authentication Claims
	we remove it from User object in OnUserInformationReceieved Event
4- we call the /UserInfo Endpoint when we need to get the address
(vid 37)


37- Manually Calling /UserInfo to get additional data
=====================================================
we add Nuget package: IdentityModel

 var discoveryClient = new DiscoveryClient("https://localhost:44356/");
var metadata = await discoveryClient.GetAsync();

var userInfoClient = new UserInfoClient(metadata.UserInfoEndpoint);
var token = await HttpContext.GetTokenAsync(OpenIdConnectDefaults.AuthenticationScheme, OpenIdConnectParameterNames.AccessToken);
var userInfo = await userInfoClient.GetAsync(token);

var address = userInfo.Claims.FirstOrDefault(c => c.Type == "address")?.Value;




38- Role Based Authorization
============================
RBAC: role-based access control
ABAC: attribute-based access control (preferred)


53 Securing API
===============
1- we add the API as an ApiResource

in Idp:
	.AddInMemoryApiResources(new List<ApiResource>() {
 		new ApiResource("imagegalleryapi", "Image Gallery API")
	});

2- we add the ApiResource in the scopes of the client
	options.Scope.Add("imagegalleryapi");

3- we add token validation in the API
	- we get (Nuget IdentityServer4.AccessTokenValidation)
	- then we add the code (in API):
            services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)
                .AddIdentityServerAuthentication(OpenIdConnectDefaults.AuthenticationScheme ,options => {
                    options.Authority = "https://localhost:44356/";
                    options.RequireHttpsMetadata = true;
                    options.ApiName = "imagegalleryapi";
                });
	



61 Including role claim in access_token when calling API
===================================================
when adding ApiResource in Idp we can add a List<string> with the required claims

new ApiResource("imagegalleryapi", "Image Gallery API", new List<string>() { "role" })



66 Creating a simple Authorization Policy (SubscriptionLevel & Country)
=========================================
we add simple policies that require claims as follows:

services.AddAuthorization(options => {
	options.AddPolicy("name", policyBuilder => { 
		policyBuilder.RequireAuthenticatedUser();
		policyBuilder.RequireClaim("subscriptionlevel", "PayingUser");
		policyBuilder.RequireClaim("claimName", "val1", "val2", "val3");
	});
});

67 Using an Authorization Policy
=================================
in controller => [Authorize(Policy = "CanOrderFrame")]

in layout
=========
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

@if ((await AuthorizationService.AuthorizeAsync(User, "CanOrderFrame")).Succeeded) {
	<li><a asp-area="" asp-controller="Gallery" asp-action="OrderFrame">Order a Framed Image</a></li>
}


68 - 69 Creating Policies with Custom Requirements
==================================================
- we create MyCustomRequirement 	: IAuthorizationRequirement
- we create MyCustomRequirementHandler 	: AuthorizationHandler<MyCustomRequirement>


	to access routeData from MVC !!
	=================================
	protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, MustOwnImageRequirement requirement) {
	            var filterContext = context.Resource as AuthorizationFilterContext;
	            var imageId = filterContext.RouteData.Values["id"].ToString();
	}

	Injecting the handler
	=====================
	services.AddSingleton<IAuthorizationHandler, MustOwnImageHandler>();



72 - Token Lifetimes and Expiration
===================================
Identity Token: 
	- very short lifetime (5 minutes default)
	- used right after delivery
	- applications implement their own expiration policies

Access Token:
	- Longer lifetime (1 hour default)
	- Must be renewed to gain access to resources
	- The IDP controls the expiry policy



73 - Demo - Token Lifetimes and Expiration
==========================================
after access token expiry the API will allow access for 5 minutes !!!
	(to allow for time difference in sync between servers)

the lifetimes to configure for a client at IDP level

client = new Client {
	AuthorizationCodeLifetime = 300,  //5 minutes (default)
        IdentityTokenLifetime = 300,      //5 minutes (default)
        AccessTokenLifetime = 3600,       //1 hour (default)
}


74 - Gaining Long-lived Access with Refresh Tokens
==================================================
the client Authenticates itself 

Header =  (ClientId, Client Secret encoded in Authroization Header)
Body   =  	---------------------------------
		| refresh token			|
		| grant type = refresh token 	|
		---------------------------------

scope = "offline_access" must be allowed

the Idp responds with a new access token (and optionaly new refresh_token)

offline_access: offline means that user is not logged in to Idp anymore


75 - Demo - Gaining Long-lived Access with Refresh Tokens
=========================================================
- Refresh Token expiration:
	refresh token lifetime is 30 days by default, then user has to sign in again
	>>>>	AbsoluteRefreshTokenLifetime = default (30 days)

- Sliding Expiration:
	refresh tokens can have sliding expiration which means every time refresh token is requested its life time is renewed.
	>>>>	RefreshTokenExpiration = TokenExpiration.Sliding
	
	and the sliding duration can be set but cannot exceed the absolute refresh token life time
	>>>>	SlidingRefreshTokenLifetime = 1296000 (default 15 days)

- Update Claims on refresh: 
	to allow updating claims after using refresh_token
	>>>>	UpdateAccessTokenClaimsOnRefresh = true


- allowing offline_access: to allow using refresh tokens
	>>>>	AllowOfflineAccess = true,
